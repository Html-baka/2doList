{"version":3,"sources":["Header.js","ToDo.js","ToDoList.js","ToDoForm.js","App.js","index.js"],"names":["Header","className","ToDo","props","useState","toDoEl","task","inputState","setInputState","useEffect","console","log","textInput","useRef","ref","onClick","e","preventDefault","toggleCross","currentTarget","id","complete","autoFocus","onKeyDown","key","inputSubmit","current","value","onChange","target","type","ToDoList","toDoList","map","el","handleClick","ToDoForm","userInput","setUserInput","onSubmit","addTask","alert","action","placeholder","aria-label","App","data","setToDoList","mapped","i","changeId","filter","element","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ed5a7d6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n   return (\r\n      \r\n      <div className=\"header\">\r\n        <h1>My to do list:</h1> \r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nconst ToDo = (props) => {\r\n   const [inputState, setInputState] = useState(props.toDoEl.task)\r\n   useEffect(()=> {\r\n      setInputState(props.toDoEl.task)\r\n      console.log('effect');\r\n   },[props.toDoEl.task])\r\n   \r\n   const textInput = useRef(null);\r\n   const toDoEl = useRef(null);\r\n   const handleClick = (e) => { //finding the id of clicked item and pass it through props for toggleToDo function\r\n      e.preventDefault();\r\n      props.toggleCross(e.currentTarget.id)\r\n   }\r\n   const buttonInputClick = () => { //changes the visibility of input field\r\n      textInput.current.className = 'editInput editInput__active';  \r\n      toDoEl.current.className = props.toDoEl.complete ? \"todo-el todo-el__disabled cross-line\" : \"todo-el todo-el__disabled\";\r\n      console.log(inputState);\r\n   }\r\n   const inputChange = (e) => { // set local state when any symbol entered\r\n      setInputState(e.target.value)\r\n   }\r\n   const onSubmit = (e) => {// check if enter pressed, if so pass id and localState to App callback inputSubmit\r\n      if (e.key === 'Enter'){\r\n         props.inputSubmit(props.toDoEl.id, textInput.current.value)\r\n         textInput.current.className = 'editInput';  //changes the visibility of input field\r\n         toDoEl.current.className = props.toDoEl.complete ? \"todo-el cross-line\" : \"todo-el\"\r\n      }\r\n   }\r\n   return (\r\n      <div className=\"task-wrappper\">\r\n      <div ref={toDoEl} onClick={handleClick} id={props.toDoEl.id} className={props.toDoEl.complete ? \"todo-el cross-line\" : \"todo-el\"}>\r\n         {props.toDoEl.task}\r\n      </div> \r\n         <input autoFocus={true} onKeyDown={onSubmit} onChange={inputChange} ref={textInput} value={inputState} className='editInput' type=\"text\"/>\r\n         <button className=\"edit__btn mdc-button mdc-button--raised\" onClick={()=>{buttonInputClick()}}>\r\n            <span className=\"mdc-button__label\">Edit</span>\r\n         </button>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ToDo\r\n","import React from 'react';\r\nimport ToDo from './ToDo'\r\n\r\nconst ToDoList = (props) => {\r\n   return (\r\n      <div>\r\n      <div className=\"wrapper\">\r\n         {props.toDoList.map(el  => (\r\n            <ToDo key={el.id} toDoEl={el} toggleCross={props.toggleCross} inputSubmit={props.inputSubmit}/>\r\n         ))}\r\n      </div>\r\n         <button onClick={props.handleClick} className=\"mdc-button mdc-button--raised deleteTask\">\r\n               <span className=\"mdc-button__label\">Delete completed task</span>\r\n            </button>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ToDoList\r\n","import React, { useState } from 'react'\r\n\r\nconst ToDoForm = (props) => {\r\n   const [ userInput, setUserInput ] = useState(\"\");\r\n   const handleChange = (e) => {\r\n      setUserInput(e.currentTarget.value)\r\n   }\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      if (userInput !== \"\"){ \r\n         props.addTask(userInput); // call the state change function from App.js\r\n         setUserInput(\"\");\r\n      }\r\n      else {\r\n         alert(\"Please, enter your task first\")\r\n      }\r\n   }\r\n   return (\r\n      <div>\r\n         <form className=\"form\" onSubmit={handleSubmit} action=\"\">\r\n         <label className=\"mdc-text-field mdc-text-field--filled mdc-text-field--no-label\">\r\n            <span className=\"mdc-text-field__ripple\"></span>\r\n            <input placeholder=\"Add new task\" onChange={handleChange} value={userInput} className=\"mdc-text-field__input\" type=\"text\" aria-label=\"Label\"/>\r\n            <span className=\"mdc-line-ripple\"></span>\r\n         </label>\r\n            \r\n            <button className=\"mdc-button mdc-button--raised add-task\">\r\n               <span className=\"mdc-button__label\">Add task</span>\r\n            </button>\r\n         </form>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ToDoForm;\r\n","import './App.css';\nimport Header from './Header';\nimport data from \"./.mockend.json\";\nimport React, { useEffect, useState } from 'react';\nimport ToDoList from './ToDoList';\nimport ToDoForm from './ToDoForm';\n\nfunction App() {\n  const [toDoList, setToDoList] = useState(data);\n  const toggleCross = (id) => {\n    let mapped = toDoList.map(task => {\n      // eslint-disable-next-line eqeqeq\n      return task.id == id? { ...task, complete: !task.complete} : {...task};\n    });\n    setToDoList(mapped);\n\n  }\n  const handleClick = () => {\n    let i = 0; // counter for id reassignment\n    const filtered = toDoList.filter(task => !task.complete); // filter if the task is complete\n    const changeId = filtered.map(element => { //reassigning the id of array elements\n      i++;\n      return {...element, id: i}\n    })\n    setToDoList(changeId)\n\n    \n  }\n  const addTask = (userInput) => {\n     setToDoList([...toDoList, {id: toDoList.length + 1, task: userInput, complete: false}]);\n  }\n  const inputSubmit = (id, value) => { // submits the edited task to the state\n      const mapped = toDoList.map(el => {\n        return el.id == id ? {...el, task: value} : {...el}\n      })\n      setToDoList(mapped)\n  }\n  return (\n    <div className=\"App\">\n      <Header/>\n      <ToDoList toDoList = {toDoList} \n        toggleCross = {toggleCross} handleClick={handleClick} inputSubmit={inputSubmit}/>\n      <ToDoForm addTask={addTask} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}